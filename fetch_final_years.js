// ÊÆã„Çä„ÅÆÂπ¥Â∫¶Ôºà2045Âπ¥„ÄÅ2050Âπ¥Ôºâ„ÇíÂèñÂæó„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
require('dotenv').config();
const fs = require('fs');
const path = require('path');

class FinalYearsFetcher {
  constructor() {
    this.apiKey = process.env.REACT_APP_ESTAT_API_KEY;
    this.baseUrl = 'https://dashboard.e-stat.go.jp/api/1.0/Json/getData';
    this.outputDir = path.join(__dirname, 'public/data/population_api');
    
    // ÈÉΩÈÅìÂ∫úÁúå„Ç≥„Éº„Éâ„Éû„ÉÉ„Éó
    this.prefectureCodes = {
      '01': { code: '01000', name: 'ÂåóÊµ∑ÈÅì' }, '02': { code: '02000', name: 'ÈùíÊ£ÆÁúå' },
      '03': { code: '03000', name: 'Â≤©ÊâãÁúå' }, '04': { code: '04000', name: 'ÂÆÆÂüéÁúå' },
      '05': { code: '05000', name: 'ÁßãÁî∞Áúå' }, '06': { code: '06000', name: 'Â±±ÂΩ¢Áúå' },
      '07': { code: '07000', name: 'Á¶èÂ≥∂Áúå' }, '08': { code: '08000', name: 'Ëå®ÂüéÁúå' },
      '09': { code: '09000', name: 'Ê†ÉÊú®Áúå' }, '10': { code: '10000', name: 'Áæ§È¶¨Áúå' },
      '11': { code: '11000', name: 'ÂüºÁéâÁúå' }, '12': { code: '12000', name: 'ÂçÉËëâÁúå' },
      '13': { code: '13000', name: 'Êù±‰∫¨ÈÉΩ' }, '14': { code: '14000', name: 'Á•ûÂ•àÂ∑ùÁúå' },
      '15': { code: '15000', name: 'Êñ∞ÊΩüÁúå' }, '16': { code: '16000', name: 'ÂØåÂ±±Áúå' },
      '17': { code: '17000', name: 'Áü≥Â∑ùÁúå' }, '18': { code: '18000', name: 'Á¶è‰∫ïÁúå' },
      '19': { code: '19000', name: 'Â±±Ê¢®Áúå' }, '20': { code: '20000', name: 'Èï∑ÈáéÁúå' },
      '21': { code: '21000', name: 'Â≤êÈòúÁúå' }, '22': { code: '22000', name: 'ÈùôÂ≤°Áúå' },
      '23': { code: '23000', name: 'ÊÑõÁü•Áúå' }, '24': { code: '24000', name: '‰∏âÈáçÁúå' },
      '25': { code: '25000', name: 'ÊªãË≥ÄÁúå' }, '26': { code: '26000', name: '‰∫¨ÈÉΩÂ∫ú' },
      '27': { code: '27000', name: 'Â§ßÈò™Â∫ú' }, '28': { code: '28000', name: 'ÂÖµÂ∫´Áúå' },
      '29': { code: '29000', name: 'Â•àËâØÁúå' }, '30': { code: '30000', name: 'ÂíåÊ≠åÂ±±Áúå' },
      '31': { code: '31000', name: 'È≥•ÂèñÁúå' }, '32': { code: '32000', name: 'Â≥∂Ê†πÁúå' },
      '33': { code: '33000', name: 'Â≤°Â±±Áúå' }, '34': { code: '34000', name: 'Â∫ÉÂ≥∂Áúå' },
      '35': { code: '35000', name: 'Â±±Âè£Áúå' }, '36': { code: '36000', name: 'Âæ≥Â≥∂Áúå' },
      '37': { code: '37000', name: 'È¶ôÂ∑ùÁúå' }, '38': { code: '38000', name: 'ÊÑõÂ™õÁúå' },
      '39': { code: '39000', name: 'È´òÁü•Áúå' }, '40': { code: '40000', name: 'Á¶èÂ≤°Áúå' },
      '41': { code: '41000', name: '‰ΩêË≥ÄÁúå' }, '42': { code: '42000', name: 'Èï∑Â¥éÁúå' },
      '43': { code: '43000', name: 'ÁÜäÊú¨Áúå' }, '44': { code: '44000', name: 'Â§ßÂàÜÁúå' },
      '45': { code: '45000', name: 'ÂÆÆÂ¥éÁúå' }, '46': { code: '46000', name: 'ÈπøÂÖêÂ≥∂Áúå' },
      '47': { code: '47000', name: 'Ê≤ñÁ∏ÑÁúå' }
    };
    
    // Á≥ªÂàóID„Åã„ÇâÂπ¥ÈΩ¢ÈöéÁ¥ö„Å∏„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
    this.seriesToAge = {
      // Áî∑ÊÄß
      "0201130120000010010": "0-4", "0201130120000010020": "5-9", "0201130120000010030": "10-14",
      "0201130120000010040": "15-19", "0201130120000010050": "20-24", "0201130120000010060": "25-29",
      "0201130120000010070": "30-34", "0201130120000010080": "35-39", "0201130120000010090": "40-44",
      "0201130120000010100": "45-49", "0201130120000010110": "50-54", "0201130120000010120": "55-59",
      "0201130120000010130": "60-64", "0201130120000010140": "65-69", "0201130120000010150": "70-74",
      "0201130120000010160": "75-79", "0201130120000010170": "80-84", "0201130120000010180": "85-89",
      "0201130120000010200": "90-94", "0201130120000010205": "95-99",
      // Â•≥ÊÄß
      "0201130220000010010": "0-4", "0201130220000010020": "5-9", "0201130220000010030": "10-14",
      "0201130220000010040": "15-19", "0201130220000010050": "20-24", "0201130220000010060": "25-29",
      "0201130220000010070": "30-34", "0201130220000010080": "35-39", "0201130220000010090": "40-44",
      "0201130220000010100": "45-49", "0201130220000010110": "50-54", "0201130220000010120": "55-59",
      "0201130220000010130": "60-64", "0201130220000010140": "65-69", "0201130220000010150": "70-74",
      "0201130220000010160": "75-79", "0201130220000010170": "80-84", "0201130220000010180": "85-89",
      "0201130220000010200": "90-94", "0201130220000010205": "95-99"
    };
    
    // Âπ¥ÈΩ¢ÈöéÁ¥öÂà•Á≥ªÂàóID
    this.allSeriesIds = {
      male: [
        "0201130120000010010", "0201130120000010020", "0201130120000010030", "0201130120000010040", "0201130120000010050",
        "0201130120000010060", "0201130120000010070", "0201130120000010080", "0201130120000010090", "0201130120000010100",
        "0201130120000010110", "0201130120000010120", "0201130120000010130", "0201130120000010140", "0201130120000010150",
        "0201130120000010160", "0201130120000010170", "0201130120000010180", "0201130120000010200", "0201130120000010205"
      ],
      female: [
        "0201130220000010010", "0201130220000010020", "0201130220000010030", "0201130220000010040", "0201130220000010050",
        "0201130220000010060", "0201130220000010070", "0201130220000010080", "0201130220000010090", "0201130220000010100",
        "0201130220000010110", "0201130220000010120", "0201130220000010130", "0201130220000010140", "0201130220000010150",
        "0201130220000010160", "0201130220000010170", "0201130220000010180", "0201130220000010200", "0201130220000010205"
      ]
    };
    
    // ÊúÄÁµÇÂπ¥Â∫¶
    this.finalYears = [2045, 2050];
  }

  async fetchRequest(url) {
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      throw new Error(`API request failed: ${error}`);
    }
  }

  async fetchSingleYear(year) {
    console.log(`\nüìÖ === ${year}Âπ¥„ÅÆ„Éá„Éº„ÇøÂèñÂæóÈñãÂßã ===`);
    
    const yearData = {};
    let completedPrefectures = 0;
    const totalPrefectures = Object.keys(this.prefectureCodes).length;
    
    // ÂêÑÈÉΩÈÅìÂ∫úÁúå„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
    for (const prefCode of Object.keys(this.prefectureCodes)) {
      try {
        const prefData = await this.fetchPrefectureData(prefCode, year);
        yearData[prefCode] = prefData;
        
        completedPrefectures++;
        const progress = Math.round((completedPrefectures / totalPrefectures) * 100);
        console.log(`‚úÖ ${this.prefectureCodes[prefCode].name} completed (${completedPrefectures}/${totalPrefectures} - ${progress}%)`);
        
        // ÂÆöÊúüÁöÑ„Å´ÈÄ≤ÊçóÂ†±Âëä
        if (completedPrefectures % 10 === 0) {
          console.log(`üìä Progress: ${progress}% completed`);
        }
        
      } catch (error) {
        console.error(`‚ùå Failed to fetch ${prefCode}: ${error.message}`);
        yearData[prefCode] = [];
      }
    }
    
    // ÈÉΩÈÅìÂ∫úÁúå„Éá„Éº„Çø„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
    const prefectureFile = path.join(this.outputDir, `population_${year}.json`);
    fs.writeFileSync(prefectureFile, JSON.stringify(yearData, null, 2));
    const fileSize = Math.round(fs.statSync(prefectureFile).size / 1024);
    console.log(`‚úÖ Prefecture data saved: ${prefectureFile} (${fileSize}KB)`);
    
    // ÂÖ®ÂõΩ„Éá„Éº„Çø„ÇíÁõ¥Êé•APIÂèñÂæó
    try {
      console.log(`üåè Fetching national data for ${year}...`);
      const nationalData = await this.fetchNationalDataDirect(year);
      const nationalFile = path.join(this.outputDir, `population_national_${year}.json`);
      fs.writeFileSync(nationalFile, JSON.stringify(nationalData, null, 2));
      const nationalFileSize = Math.round(fs.statSync(nationalFile).size / 1024);
      console.log(`‚úÖ National data saved: ${nationalFile} (${nationalFileSize}KB)`);
      
    } catch (error) {
      console.error(`‚ùå Failed to fetch national data for ${year}: ${error.message}`);
    }
    
    console.log(`üéâ ${year}Âπ¥„ÅÆ„Éá„Éº„ÇøÂèñÂæóÂÆå‰∫Ü\n`);
  }

  async fetchPrefectureData(prefCode, year) {
    const prefInfo = this.prefectureCodes[prefCode];
    const allData = [];

    // Áî∑ÊÄß„Éá„Éº„Çø„ÇíÂèñÂæó
    for (const seriesId of this.allSeriesIds.male) {
      try {
        const url = `${this.baseUrl}?Lang=JP&IndicatorCode=${seriesId}&RegionCode=${prefInfo.code}`;
        const response = await this.fetchRequest(url);

        if (response.GET_STATS?.RESULT?.status !== "0") {
          continue;
        }

        const dataObjects = response.GET_STATS?.STATISTICAL_DATA?.DATA_INF?.DATA_OBJ;
        if (!dataObjects || !Array.isArray(dataObjects)) continue;

        for (const obj of dataObjects) {
          const value = obj.VALUE;
          const timeCode = value['@time'];
          const dataYear = parseInt(timeCode.substring(0, 4));
          
          if (dataYear === year) {
            const ageGroup = this.seriesToAge[seriesId];
            if (ageGroup) {
              allData.push({
                year: dataYear,
                prefecture: prefInfo.name,
                prefectureCode: prefCode,
                ageGroup,
                gender: 'male',
                population: Math.round(parseInt(value['$']) / 1000)
              });
            }
          }
        }

        await new Promise(resolve => setTimeout(resolve, 80)); // „Çà„ÇäÁü≠„ÅÑÈñìÈöî
      } catch (error) {
        console.warn(`‚ö† Failed to fetch male ${seriesId} for ${prefCode}: ${error.message}`);
      }
    }

    // Â•≥ÊÄß„Éá„Éº„Çø„ÇíÂèñÂæó
    for (const seriesId of this.allSeriesIds.female) {
      try {
        const url = `${this.baseUrl}?Lang=JP&IndicatorCode=${seriesId}&RegionCode=${prefInfo.code}`;
        const response = await this.fetchRequest(url);

        if (response.GET_STATS?.RESULT?.status !== "0") {
          continue;
        }

        const dataObjects = response.GET_STATS?.STATISTICAL_DATA?.DATA_INF?.DATA_OBJ;
        if (!dataObjects || !Array.isArray(dataObjects)) continue;

        for (const obj of dataObjects) {
          const value = obj.VALUE;
          const timeCode = value['@time'];
          const dataYear = parseInt(timeCode.substring(0, 4));
          
          if (dataYear === year) {
            const ageGroup = this.seriesToAge[seriesId];
            if (ageGroup) {
              allData.push({
                year: dataYear,
                prefecture: prefInfo.name,
                prefectureCode: prefCode,
                ageGroup,
                gender: 'female',
                population: Math.round(parseInt(value['$']) / 1000)
              });
            }
          }
        }

        await new Promise(resolve => setTimeout(resolve, 80)); // „Çà„ÇäÁü≠„ÅÑÈñìÈöî
      } catch (error) {
        console.warn(`‚ö† Failed to fetch female ${seriesId} for ${prefCode}: ${error.message}`);
      }
    }

    return allData;
  }

  async fetchNationalDataDirect(year) {
    const allData = [];

    // Áî∑ÊÄß„Éá„Éº„Çø„ÇíÂèñÂæó
    for (const seriesId of this.allSeriesIds.male) {
      try {
        const url = `${this.baseUrl}?Lang=JP&IndicatorCode=${seriesId}&RegionCode=00000`;
        const response = await this.fetchRequest(url);

        if (response.GET_STATS?.RESULT?.status !== "0") {
          continue;
        }

        const dataObjects = response.GET_STATS?.STATISTICAL_DATA?.DATA_INF?.DATA_OBJ;
        if (!dataObjects || !Array.isArray(dataObjects)) continue;

        for (const obj of dataObjects) {
          const value = obj.VALUE;
          const timeCode = value['@time'];
          const dataYear = parseInt(timeCode.substring(0, 4));
          
          if (dataYear === year) {
            const ageGroup = this.seriesToAge[seriesId];
            if (ageGroup) {
              const rawValue = parseInt(value['$']);
              const processedValue = Math.round(rawValue / 1000 / 1000);
              
              allData.push({
                year: dataYear,
                prefecture: 'ÂÖ®ÂõΩ',
                prefectureCode: '00000',
                ageGroup,
                gender: 'male',
                population: processedValue
              });
            }
          }
        }

        await new Promise(resolve => setTimeout(resolve, 80));
      } catch (error) {
        console.warn(`‚ö† Failed to fetch national male ${seriesId}: ${error.message}`);
      }
    }

    // Â•≥ÊÄß„Éá„Éº„Çø„ÇíÂèñÂæó
    for (const seriesId of this.allSeriesIds.female) {
      try {
        const url = `${this.baseUrl}?Lang=JP&IndicatorCode=${seriesId}&RegionCode=00000`;
        const response = await this.fetchRequest(url);

        if (response.GET_STATS?.RESULT?.status !== "0") {
          continue;
        }

        const dataObjects = response.GET_STATS?.STATISTICAL_DATA?.DATA_INF?.DATA_OBJ;
        if (!dataObjects || !Array.isArray(dataObjects)) continue;

        for (const obj of dataObjects) {
          const value = obj.VALUE;
          const timeCode = value['@time'];
          const dataYear = parseInt(timeCode.substring(0, 4));
          
          if (dataYear === year) {
            const ageGroup = this.seriesToAge[seriesId];
            if (ageGroup) {
              const rawValue = parseInt(value['$']);
              const processedValue = Math.round(rawValue / 1000 / 1000);
              
              allData.push({
                year: dataYear,
                prefecture: 'ÂÖ®ÂõΩ',
                prefectureCode: '00000',
                ageGroup,
                gender: 'female',
                population: processedValue
              });
            }
          }
        }

        await new Promise(resolve => setTimeout(resolve, 80));
      } catch (error) {
        console.warn(`‚ö† Failed to fetch national female ${seriesId}: ${error.message}`);
      }
    }

    return allData;
  }

  async fetchFinalYearsData() {
    console.log('üöÄ Fetching final years data (2045, 2050)...\n');
    
    for (const year of this.finalYears) {
      await this.fetchSingleYear(year);
      
      // Âπ¥Â∫¶Èñì„ÅßÂ∞ë„Åó‰ºëÊÜ©
      if (year !== this.finalYears[this.finalYears.length - 1]) {
        console.log('‚è±Ô∏è  Taking a short break between years...');
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }
    
    console.log('üéâ All final years data fetching completed!');
    this.generateCompleteSummaryReport();
  }

  generateCompleteSummaryReport() {
    console.log('\nüìä === Complete Data Summary Report ===');
    
    const allYears = [2025, 2030, 2035, 2040, 2045, 2050];
    let totalSize = 0;
    let completedYears = [];
    
    console.log('Âπ¥Â∫¶Âà•„Éá„Éº„Çø„Éï„Ç°„Ç§„É´Á¢∫Ë™ç:');
    allYears.forEach(year => {
      const prefFile = path.join(this.outputDir, `population_${year}.json`);
      const nationalFile = path.join(this.outputDir, `population_national_${year}.json`);
      
      let yearComplete = true;
      console.log(`\n${year}Âπ¥:`);
      
      if (fs.existsSync(prefFile)) {
        const size = Math.round(fs.statSync(prefFile).size / 1024);
        console.log(`  ‚úÖ ÈÉΩÈÅìÂ∫úÁúå„Éá„Éº„Çø: ${size}KB`);
        totalSize += size;
      } else {
        console.log(`  ‚ùå ÈÉΩÈÅìÂ∫úÁúå„Éá„Éº„Çø: Êú™ÂèñÂæó`);
        yearComplete = false;
      }
      
      if (fs.existsSync(nationalFile)) {
        const size = Math.round(fs.statSync(nationalFile).size / 1024);
        console.log(`  ‚úÖ ÂÖ®ÂõΩ„Éá„Éº„Çø: ${size}KB`);
        totalSize += size;
      } else {
        console.log(`  ‚ùå ÂÖ®ÂõΩ„Éá„Éº„Çø: Êú™ÂèñÂæó`);
        yearComplete = false;
      }
      
      if (yearComplete) {
        completedYears.push(year);
      }
    });
    
    console.log(`\nüìà ÂèñÂæóÂÆå‰∫ÜÁµ±Ë®à:`);
    console.log(`  ÂÆå‰∫ÜÂπ¥Â∫¶: ${completedYears.length}/${allYears.length}Âπ¥Â∫¶ (${completedYears.join(', ')})`);
    console.log(`  Á∑è„Éá„Éº„Çø„Çµ„Ç§„Ç∫: ${totalSize}KB`);
    
    // ÂåóÊµ∑ÈÅì40-44Ê≠≥„ÅÆÂÖ®Âπ¥Â∫¶Êé®Áßª
    if (completedYears.length > 0) {
      console.log('\nüèîÔ∏è ÂåóÊµ∑ÈÅì40-44Ê≠≥„ÅÆÂÖ®Âπ¥Â∫¶Êé®Áßª:');
      
      const hokkaidoTrend = [];
      completedYears.forEach(year => {
        const prefFile = path.join(this.outputDir, `population_${year}.json`);
        try {
          const prefData = JSON.parse(fs.readFileSync(prefFile, 'utf8'));
          if (prefData['01']) {
            const hokkaido40_44 = prefData['01'].filter(d => d.ageGroup === '40-44');
            const total = hokkaido40_44.reduce((sum, d) => sum + d.population, 0);
            hokkaidoTrend.push({ year, total });
          }
        } catch (error) {
          console.log(`‚ö† ${year}Âπ¥„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº`);
        }
      });
      
      hokkaidoTrend.forEach((data, index) => {
        if (index > 0) {
          const prev = hokkaidoTrend[index - 1];
          const change = data.total - prev.total;
          const changeRate = prev.total > 0 ? ((change / prev.total) * 100) : 0;
          console.log(`  ${data.year}Âπ¥: ${data.total}ÂçÉ‰∫∫ (ÂâçÊúüÊØî: ${change > 0 ? '+' : ''}${change}ÂçÉ‰∫∫, ${changeRate > 0 ? '+' : ''}${changeRate.toFixed(1)}%)`);
        } else {
          console.log(`  ${data.year}Âπ¥: ${data.total}ÂçÉ‰∫∫ (Âü∫Ê∫ñÂπ¥)`);
        }
      });
    }
    
    console.log('\n‚úÖ ÂÖ®Âπ¥Â∫¶API„Éá„Éº„ÇøÂèñÂæó„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÆå‰∫ÜÔºÅ');
    console.log('üìÅ „Éá„Éº„Çø‰øùÂ≠òÂÖà: public/data/population_api/');
  }
}

// ÂÆüË°å
async function main() {
  try {
    const fetcher = new FinalYearsFetcher();
    await fetcher.fetchFinalYearsData();
  } catch (error) {
    console.error('‚ùå Script failed:', error.message);
    process.exit(1);
  }
}

main();